{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","props","state","expanded","toggleExpanded","bind","this","setState","className","title","startdate","location","onClick","Component","EventList","events","map","event","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","number","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0PAmCeA,E,kDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAGZ,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANL,E,kDAQnB,WACEC,KAAKC,SAAS,CACZJ,UAAWG,KAAKJ,MAAMC,a,oBAG1B,WACE,OACE,gCACE,oBAAIK,UAAU,cAAd,SAA6BF,KAAKL,MAAMQ,QACxC,sBAAKD,UAAU,aAAf,UACE,+BAAOF,KAAKL,MAAMS,YAClB,+BAAOJ,KAAKL,MAAMU,cAEpB,wBAAQH,UAAU,eAAeI,QAASN,KAAKF,eAA/C,0BAGA,qBACEI,UAAS,cAASF,KAAKJ,MAAMC,SAAW,WAAa,mB,GA1B3CU,aCgBLC,E,4JAdb,WACE,IAAQC,EAAWT,KAAKL,MAAhBc,OACR,OACE,oBAAIP,UAAU,YAAd,SACGO,EAAOC,KAAI,SAACC,GAAD,OACV,6BACE,cAAC,EAAD,CAAOA,MAAOA,KADPA,EAAMC,a,GANDL,aC0DTM,E,4MAjDbjB,MAAQ,CACNkB,MAAO,GACPC,YAAa,I,EAIfC,mBAAqB,SAACL,GACpB,IAAMM,EAAQN,EAAMO,OAAOD,MACrBF,EAAc,EAAKpB,MAAMwB,UAAUC,QAAO,SAACf,GAC/C,OAAOA,EAASgB,cAAcC,QAAQL,EAAMI,gBAAkB,KAEhE,EAAKpB,SAAS,CACZa,MAAOG,EACPF,iB,EAGJQ,kBAAoB,SAACC,GACnB,EAAKvB,SAAS,CACZa,MAAOU,K,4CAIX,WAAU,IAAD,OACP,OACE,sBAAKtB,UAAU,aAAf,UACE,uBACEuB,KAAK,OACLvB,UAAU,OACVe,MAAOjB,KAAKJ,MAAMkB,MAClBY,SAAU1B,KAAKgB,qBAEjB,qBAAId,UAAU,cAAd,UACGF,KAAKJ,MAAMmB,YAAYL,KAAI,SAACc,GAAD,OAC1B,oBAEElB,QAAS,kBAAM,EAAKiB,kBAAkBC,IAFxC,SAIGA,GAHIA,MAMT,6BACE,gDADM,iB,GAlDOjB,aCyBVoB,E,4MAxBb/B,MAAQ,CACNgC,OAAQ,I,EAEVZ,mBAAqB,SAACL,GACpB,IAAMM,EAAQN,EAAMO,OAAOD,MAC3B,EAAKhB,SAAS,CACZ2B,OAAQX,K,4CAIZ,WACE,OACE,qBAAKf,UAAU,iBAAf,SACE,uBACEuB,KAAK,SACLvB,UAAU,cACVe,MAAOjB,KAAKJ,MAAMgC,OAClBF,SAAU1B,KAAKgB,2B,GAlBIT,aCgBdsB,E,4JAXb,WACE,OACE,sBAAK3B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GANUK,aCMEuB,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.79b2610f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expanded: false,\r\n    };\r\n\r\n    this.toggleExpanded = this.toggleExpanded.bind(this);\r\n  }\r\n  toggleExpanded() {\r\n    this.setState({\r\n      expanded: !this.state.expanded,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className=\"event-title\">{this.props.title}</h2>\r\n        <div className=\"basic-info\">\r\n          <span>{this.props.startdate}</span>\r\n          <span>{this.props.location}</span>\r\n        </div>\r\n        <button className=\"show-details\" onClick={this.toggleExpanded}>\r\n          Show Details\r\n        </button>\r\n        <div\r\n          className={`row ${this.state.expanded ? 'expanded' : 'normal'}`}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  //traditional way of initializing a calss component's state!\r\n  //    constructor() {\r\n  //    super();\r\n\r\n  //    this.state = {\r\n  //      query: ''\r\n  //    }\r\n  //  }\r\n  // }\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n  };\r\n\r\n  // takes the value from the input and updates the state of query based on that value\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n          <li key=\"all\">\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    number: 32,\r\n  };\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      number: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"NumberOfEvents\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"eventNumber\"\r\n          value={this.state.number}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch />\n        <EventList />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}